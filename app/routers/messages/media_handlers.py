import io
import logging

import aiohttp
from aiogram import Router, F, types, html
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender


from app.image_generate import get_url_converted_image
from app import keyboards as kb
from app.keyboards import ClothType
from app.states import Photo

logger = logging.getLogger(__name__)

router = Router(name=__name__)


@router.message(Photo.human_img, F.photo)
async def get_human_img(message: Message, state: FSMContext) -> None:
    human_img = io.BytesIO()

    await message.bot.download(file=message.photo[-1].file_id, destination=human_img)
    await state.update_data(human_img=human_img)

    user_data = await state.get_data()

    for type in ClothType:
        if type.name == user_data['cloth']:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è:\n{html.bold(type.value)}\n\n"
                                 f"2Ô∏è‚É£ –®–∞–≥: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã", reply_markup=await kb.cancel())
    await state.set_state(Photo.garm_img)


@router.message(Photo.garm_img, F.photo)
async def get_garm_img(message: Message, state: FSMContext) -> None:
    garm_img = io.BytesIO()

    await message.bot.download(file=message.photo[-1].file_id, destination=garm_img)
    await state.update_data(garm_img=garm_img)

    await send_image(message, state)
    user_data = await state.get_data()
    for type in ClothType:
        if type.name == user_data['cloth']:
            await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è:\n{html.bold(type.value)}\n\n'
                                 f'1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞', reply_markup=await kb.cancel())
    await state.set_state(Photo.human_img)


async def send_image(message, state):
    await message.answer(text=f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...\n–ë–æ—Ç —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –≤–∞—Å –æ–¥–µ—Ç—å üòä\n\n'
                              f'‚ùóÔ∏è–í–∞–∂–Ω–æ: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 20 —Å–µ–∫—É–Ω–¥')
    await message.answer_dice(emoji='üé≤')

    user_data = await state.get_data()

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")

    data_images = {
        "human_img": user_data['human_img'],
        "garm_img": user_data['garm_img'],
        "garment_des": "cute",
        "category": user_data['cloth'],
    }

    async with ChatActionSender.upload_photo(
            bot=message.bot,
            chat_id=message.chat.id,
    ):
        image_url = await get_url_converted_image(data_images)
        if image_url:
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as response:
                    result_bytes = await response.read()
            await message.reply_document(
                document=types.BufferedInputFile(
                    file=result_bytes,
                    filename='–†–µ–∑—É–ª—å—Ç–∞—Ç.jpeg'
                )
            )
            logger.info("–£–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        else:
            await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–æ—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n'
                                      f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,  –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, —Ç–∞–∫ –∏ –æ–¥–µ–∂–¥–∞.')


@router.message(Photo.human_img, F.text)
async def incorrect_photo(message: Message) -> None:
    await message.answer(text=f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ,  –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫',
                         reply_markup=await kb.cancel())


@router.message(Photo.garm_img, F.text)
async def incorrect_photo(message: Message) -> None:
    await message.answer(text=f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –æ–¥–µ–∂–¥–∞',
                         reply_markup=await kb.cancel())
